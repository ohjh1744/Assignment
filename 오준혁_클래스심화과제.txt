기본과제
- 프로그래머들끼리 우연히 같은 이름의 클래스나 메서드를 선언할 수 있기 때문에 namespace로 구분지어 가능하고
using 키워드를 사용해 가져와서 사용할 수 있다.
- partial class을 사용하면 여러 사람이 각자 다른 환경에서 같은 클래스 내부에서 작업이 가능하다.
- 이를 통해 프로그래머들끼리 각자 구현한 것을 합칠 때 문제가 생기는 현상을 피할 수가 있다.


심화과제 
1. 깊은 복사를 통해 생성된 객체가 가진 참조형 변수는 기존 객체의 변수와 메모리 공간상 다른 위치에 존재한다.
2. (기존 플레이어의 변수가 어떤 변수를 의미하는지 몰라서 일단 생각한대로 작성하겠습니다.)
- 기존 플레이어의 변수가 참조타입의 경우 얕은 복사를 통해 새로 할당된 변수는 서로가 stack의 다른 위치에 존재하지만,
  참조하는 가리키는 인스턴스의 주소값은 동일하다.
- 만약, 기존 플레이어의 변수가 값타입의 경우 깊은 복사를 통해 새로 할당된 변수는 마찬가지로 서로가 stack의 다른 위치에 존재하고,
   각 변수가 가지고 있는 인스턴스 또한 서로 다른 위치에 존재하기 때문에 서로에게 영향이 없다.
3. ref키워드를 통해 새로 생성된 객체의 주소값을 가지고 와서 값을 복사해온다.
