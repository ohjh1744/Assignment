게임을 제작하는데
정렬, 그래프탐색, dp, 그리디등의 알고리즘이 중요하다고 생각한다.
정렬의 경우는 버블, 선택, 삽입 O(n^2)가 기본적으로 있지만,
이보다 더 시간이 적게 걸리는 O(nlogn)으로 퀵, 머지, 힙정렬도 존재한다.
퀵정렬의 경우 빠르긴 하지만, 최악의 경우 O(n^2)가 걸리기 때문에,
pivot의 상황이 안좋을 경우 머지소트를 이용하는 것이 좋다.

그래프탐색의 경우
최단거리를 구하는 알고리즘,
mst를 구하는 알고리즘,
위상정렬과 관련된 알고리즘
등이 존재하고 게임구현에 좋은 알고리즘이라고 생각한다.
최단거리를 구하는 알고리즘에는 다익스트라와 벨만포드,
mst를 구하는 알고리즘에는 프림알고리즘과 크루스칼알고리즘.
위상정렬 알고리즘에는 칸알고리즘이 있다.
또한, 최단거리를 구하는 알고리즘 중에서도 모든 노드가 아닌 한노드와의 최단거리를
구하는 A*알고리즘이 존재한다.

다익스트라 vs 벨만포드
- 다익스트라는 O(mlogn),
- 벨만포드는 O(mn).
- 벨만포드의 경우 음의 가중치를 갖는 그래프에서도 사용이 가능하다.

프림 vs 크루스칼
- 크루스칼은 이미 정렬된 상황이나 그래프가 sparse할때 사용하면 프림보다 좋은 효율을 얻을 수 있다.
-> 피보나치 힙을 이용한 프림알고리즘의 경우, disjoint set의 크루스칼이 더 가벼움.
- 반대로, 그래프가 dense 한 경우 프림알고리즘을 사용하는 것이 효율이 좋다.
