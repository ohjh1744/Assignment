GoF의 디자인패턴
: 23가지의 디자인 패턴을 정리한것으로, 생성, 구조, 행위 3가지로 분류되어있다.
생성패턴: 객체 생성과 관련한 패턴.
구조패턴: 클래스나 객체를 조합해서 더 큰 구조를 만드는 패턴
행위패턴: 객체나 클래스 사이의 알고리즘이나 책임 분배에 관련된 패턴.

생성패턴
- 팩토리 메서드: 객체 생성을 서브클래스로 위임하여 캡슐화
-> 도시라는 추상클래스 존재, 서울, 부산, 광주 3개의 도시를 생성하기 위해 사용.
- 추상팩토리: 구체적인 클래스에 의존하지 않고 서로 연관된 객체들의 조합을 만드는 인터페이스를 제공하는 패턴
-> 도시라는 추상클래스와 더불어, 나무라는 추상클래스와 하위클래스 벚꽃나무, 밤나무가 있을때,
-> 두 추상클래스의 조합을 객체로 생성할때 사용.(ex 서울, 벚꽃나무)(ex 부산 밤나무)
- 빌더: 복합 객체의 생성과 표현을 분리하여 동일한 생성 절차에서도 다른 표현결과를 만들어냄.
-> 어떤 클래스의 속성을 개별적으로 설정해주는데 유용하다.
-싱글톤: 어떤 클래스의 인스턴스는 하나임을 보장.
-> 유니티에서 GameManager와 같은 하나의 인스턴스만 있어도 되는 경우 사용.

행위패턴
- 옵저버: 객체의 상태 변화에 따라 각 관찰자에게 통지하는 패턴.
-> 특정 버튼을 눌렀을 때 특정효과들을 일으키는 이벤트를 발생시킴.
-상태 패턴: 객체의 내부 상태에 따라 동일한 작업이 상태에 따라 다르게 작동하도록 상태를 객체로 표현.
-> 캐릭터가 이동, 공격, 방어, 휴식 등 여러 상태가 있고 상태에 따른 행동을 작동시키도록 하는데 유용.

구조패턴
- 어댑터 패턴: 클래스의 인터페이스를 다른 인터페이스로 변환하여 다른 클래스가 이용할 수 있도록 함.
-> Interface 새 , class 참새: 새,  interface 동물이동, class 동물: 동물이동
-> 참새 class내부에 동물이동 인터페이스를 필드변수로 가져, 참새의 이동함수안에 동물이동 인터페이스의 이동 함수를 호출.